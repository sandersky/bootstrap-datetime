{"version":3,"file":"main.js","sources":["base-view.js","date-view.js","time-view.js","main.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @module BaseView\n * @returns {BaseView} base view class that defines necessary view methods\n */\ndefine('bootstrap-datetime/base-view',[], function () {\n    'use strict';\n\n    function BaseView(updateCallback) {\n        // Default icon should be a circle with a slash through it\n        // Objects that extend this object should override the icon to something relevant\n        this.icon = 'ban-circle';\n        this.closeOnUpdate = true;\n        this.updateCallback = updateCallback;\n\n        // Objects that extend this object should implement the following:\n        this.bodyContents = null;\n        this.bodyDataId = null;\n        this.footerButton = null;\n        this.titleContents = null;\n    }\n\n    BaseView.prototype.update = function (datetime) {\n        this.current = datetime;\n    };\n\n    return BaseView;\n});\n\n","/**\n * @module DateView\n * @returns {DateView} picker view for dates\n */\ndefine('bootstrap-datetime/date-view',[\n    './base-view',\n    'moment',\n], function (\n    BaseView,\n    moment\n) {\n    'use strict';\n\n    var localeText = {\n        TODAY: 'Today',\n    };\n\n    function clearCalendar(dateView) {\n        // Remove days from calendar\n        while (dateView.tbody.firstChild) {\n            dateView.tbody.removeChild(dateView.tbody.firstChild);\n        }\n    }\n\n    function createButton(dataId, contents, clickHandler) {\n        var button = document.createElement('a');\n        button.href = '#';\n        button.className = 'btn btn-xs btn-default';\n        button.setAttribute('data-id', dataId);\n        button.innerHTML = contents;\n        button.onclick = clickHandler;\n\n        return button;\n    }\n\n    function createCalendar(dateView) {\n        var th;\n        var table = document.createElement('table');\n        var thead = document.createElement('thead');\n        var theadTr = document.createElement('tr');\n        dateView.tbody = document.createElement('tbody');\n\n        table.className = 'table table-condensed table-striped';\n\n        table.appendChild(thead);\n        thead.appendChild(theadTr);\n        table.appendChild(dateView.tbody);\n\n        var weekdays = moment.weekdaysShort();\n\n        for (var i = 0; i < weekdays.length; i++) {\n            th = document.createElement('th');\n            th.innerHTML = weekdays[i];\n            theadTr.appendChild(th);\n        }\n\n        return table;\n    }\n\n    function dayClickHandler(dateView, e) {\n        e.preventDefault();\n\n        // Update current datetime to be current visible month and year\n        dateView.currentDateTime = dateView.visibleDateTime;\n\n        // Update current datetime to be date clicked\n        dateView.currentDateTime.date(parseInt(e.currentTarget.innerHTML));\n\n        dateView.updateCallback(dateView.currentDateTime);\n    }\n\n    function updateHeader(dateView, dateTime) {\n        dateView.header.innerHTML = moment.months()[dateTime.month()] + ' ' + dateTime.year();\n    }\n\n    function updateUI(dateView, dateTime) {\n        dateView.visibleDateTime = moment(dateTime);\n\n        updateHeader(dateView, dateTime);\n        clearCalendar(dateView);\n\n        var tr = document.createElement('tr');\n        dateView.tbody.appendChild(tr);\n\n        var dayCount,\n            i,\n            link,\n            td;\n\n        var firstOfMonth = moment(dateTime).startOf('month').day();\n        var lastOfMonth = moment(dateTime).endOf('month');\n\n        for (dayCount = 0; dayCount < firstOfMonth; dayCount++) {\n            tr.appendChild(document.createElement('td'));\n        }\n\n        var currentMonthAndYear = dateView.currentDateTime.month() === dateView.visibleDateTime.month() &&\n                                  dateView.currentDateTime.year() === dateView.visibleDateTime.year();\n\n        for (i = 0 ; i < lastOfMonth.date(); i++) {\n            if (dayCount === 7) {\n                tr = document.createElement('tr');\n                dateView.tbody.appendChild(tr);\n                dayCount = 0;\n            }\n\n            td = document.createElement('td');\n            link = document.createElement('a');\n            link.href = '#';\n            link.innerHTML = i + 1;\n            link.onclick = function (e) {\n                dayClickHandler(dateView, e);\n            };\n\n            if (currentMonthAndYear && (i + 1) === dateTime.date()) {\n                link.className = 'btn btn-xs btn-default active';\n            }\n\n            td.appendChild(link);\n            tr.appendChild(td);\n\n            dayCount++;\n        }\n\n        for (i = lastOfMonth.day(); i < 6; i++) {\n            tr.appendChild(document.createElement('td'));\n            dayCount++;\n        }\n    }\n\n    function nextMonthClickHandler(dateView) {\n        updateUI(dateView, dateView.visibleDateTime.add(1, 'months'));\n    }\n\n    function previousMonthClickHandler(dateView) {\n        updateUI(dateView, dateView.visibleDateTime.subtract(1, 'months'));\n    }\n\n    function todayClickHandler(dateView) {\n        var now = moment();\n\n        // If input already has a DateTime update time (keeping date the same)\n        if (dateView.currentDateTime && dateView.currentDateTime.isValid()) {\n            dateView.currentDateTime.date(now.date());\n            dateView.currentDateTime.month(now.month());\n            dateView.currentDateTime.year(now.year());\n        // Otherwise set date and time to now\n        } else {\n            dateView.currentDateTime = now;\n        }\n\n        dateView.updateCallback(dateView.currentDateTime);\n    }\n\n    function DateView(updateCallback) {\n        var self = this;\n\n        this.footerButton = createButton('today-btn', localeText.TODAY, function (e) {\n            e.preventDefault();\n            todayClickHandler(self);\n        });\n        this.icon = 'calendar';\n        this.updateCallback = updateCallback;\n\n        this.header = document.createElement('h3');\n        this.header.className = 'panel-title';\n\n        this.titleContents = [\n            createButton('previous-btn', '<span class=\"glyphicon glyphicon-chevron-left\"></span>', function (e) {\n                e.preventDefault();\n                previousMonthClickHandler(self);\n            }),\n            this.header,\n            createButton('next-btn', '<span class=\"glyphicon glyphicon-chevron-right\"></span>', function (e) {\n                e.preventDefault();\n                nextMonthClickHandler(self);\n            }),\n        ];\n\n        this.bodyContents = [\n            createCalendar(self),\n        ];\n\n        this.bodyDataId = 'date-content';\n    }\n\n    // Make DateView inherit BaseView\n    DateView.prototype = new BaseView();\n\n    DateView.prototype.update = function (dateTime) {\n        this.currentDateTime = dateTime;\n\n        updateUI(this, this.currentDateTime);\n    };\n\n    return DateView;\n});\n\n","/**\n * @module TimeView\n * @returns {TimeView} picker view for times\n */\ndefine('bootstrap-datetime/time-view',[\n    './base-view',\n    'moment',\n], function (\n    BaseView,\n    moment\n) {\n    'use strict';\n\n    var localeText = {\n        DONE: 'Done',\n        NOW: 'Now',\n    };\n\n    function createButton(timeView, dataId, additionalClassName, contents, clickHandler) {\n        var button = document.createElement('a');\n        button.href = '#';\n        button.className = 'btn btn-default';\n\n        if (additionalClassName) {\n            button.className += ' ' + additionalClassName;\n        }\n\n        button.setAttribute('data-id', dataId);\n        button.innerHTML = contents;\n        button.onclick = function (e) {\n            e.preventDefault();\n            clickHandler(timeView, e);\n        };\n\n        return button;\n    }\n\n    function updateTime(timeView) {\n        if (!timeView.currentDateTime || !timeView.currentDateTime.isValid()) {\n            timeView.currentDateTime = moment();\n        }\n\n        timeView.currentDateTime.hour(timeView.hourInput.value);\n        timeView.currentDateTime.minute(timeView.minuteInput.value);\n        timeView.currentDateTime.second(timeView.secondInput.value);\n\n        timeView.updateCallback(timeView.currentDateTime);\n    }\n\n    function doneClickHandler(timeView) {\n        timeView.closeOnUpdate = true;\n        timeView.updateCallback(timeView.currentDateTime);\n        timeView.closeOnUpdate = false;\n    }\n\n    function downClickHandler(timeView, e) {\n        var btn = e.currentTarget;\n        var input = null;\n        var max = 59;\n\n        switch (btn.getAttribute('data-id')) {\n            case 'hour-down-btn':\n                input = timeView.hourInput;\n                max = 23;\n                break;\n\n            case 'minute-down-btn':\n                input = timeView.minuteInput;\n                break;\n\n            default: // second-down-btn\n                input = timeView.secondInput;\n        }\n\n        var val = parseInt(input.value);\n\n        if (isNaN(val) || val === 0) {\n            input.value = max;\n        } else {\n            input.value = --val;\n        }\n\n        updateTime(timeView);\n    }\n\n    function upClickHandler(timeView, e) {\n        var btn = e.currentTarget;\n        var input = null;\n        var max = 59;\n\n        switch (btn.getAttribute('data-id')) {\n            case 'hour-up-btn':\n                input = timeView.hourInput;\n                max = 23;\n                break;\n\n            case 'minute-up-btn':\n                input = timeView.minuteInput;\n                break;\n\n            default: // second-up-btn\n                input = timeView.secondInput;\n        }\n\n        var val = parseInt(input.value);\n\n        if (isNaN(val) || val === max) {\n            input.value = 0;\n        } else {\n            input.value = ++val;\n        }\n\n        updateTime(timeView);\n    }\n\n    function createNumericPicker(timeView, dataId) {\n        var div = document.createElement('div');\n        div.className = 'col-md-4 text-center';\n\n        var upBtn = createButton(timeView, dataId + '-up-btn', '', '<span class=\"glyphicon glyphicon-chevron-up\"></span>', upClickHandler);\n        var downBtn = createButton(timeView, dataId + '-down-btn', '', '<span class=\"glyphicon glyphicon-chevron-down\"></span>', downClickHandler);\n        var input = document.createElement('input');\n        input.className = 'form-control';\n        input.maxLength = 2;\n        input.setAttribute('data-id', dataId + '-input');\n\n        div.appendChild(upBtn);\n        div.appendChild(input);\n        div.appendChild(downBtn);\n\n        return div;\n    }\n\n    function nowClickHandler(timeView) {\n        var now = moment();\n\n        // If input already has a DateTime update date (keeping time the same)\n        if (timeView.currentDateTime && timeView.currentDateTime.isValid()) {\n            timeView.currentDateTime.hour(now.hour());\n            timeView.currentDateTime.minute(now.minute());\n            timeView.currentDateTime.second(now.second());\n        // Otherwise set date and zero out time\n        } else {\n            timeView.currentDateTime = now;\n            timeView.currentDateTime.hour(0);\n            timeView.currentDateTime.minute(0);\n            timeView.currentDateTime.second(0);\n        }\n\n        timeView.closeOnUpdate = true;\n        timeView.updateCallback(timeView.currentDateTime);\n        timeView.closeOnUpdate = false;\n    }\n\n    function updateUI(dateView, dateTime) {\n        dateView.hourInput.value = dateTime.hour();\n        dateView.minuteInput.value = dateTime.minute();\n        dateView.secondInput.value = dateTime.second();\n    }\n\n    function TimeView(updateCallback) {\n        this.icon = 'time';\n        this.footerButton = createButton(this, 'now-btn', 'btn-xs', localeText.NOW, nowClickHandler);\n        this.closeOnUpdate = false;\n\n        var clearDiv = document.createElement('div');\n        clearDiv.className = 'clearfix';\n\n        var hourPicker = createNumericPicker(this, 'hour');\n        var minutePicker = createNumericPicker(this, 'minute');\n        var secondPicker = createNumericPicker(this, 'second');\n\n        this.hourInput = hourPicker.children[1];\n        this.minuteInput = minutePicker.children[1];\n        this.secondInput = secondPicker.children[1];\n\n        var doneBtn = document.createElement('a');\n        doneBtn.href = '#';\n        doneBtn.className = 'btn btn-xs btn-default pull-right';\n        doneBtn.textContent = localeText.DONE;\n        doneBtn.setAttribute('data-id', 'done-btn');\n\n        var self = this;\n\n        doneBtn.onclick = function (e) {\n            e.preventDefault();\n            doneClickHandler(self);\n        };\n\n        this.bodyContents = [\n            hourPicker,\n            minutePicker,\n            secondPicker,\n            doneBtn,\n            clearDiv,\n        ];\n\n        this.bodyDataId = 'time-content';\n        this.updateCallback = updateCallback;\n    }\n\n    // Make TimeView inherit BaseView\n    TimeView.prototype = new BaseView();\n\n    TimeView.prototype.update = function (datetime) {\n        this.currentDateTime = datetime;\n\n        updateUI(this, this.currentDateTime);\n    };\n\n    return TimeView;\n});\n\n","/**\n * @module main\n */\ndefine('bootstrap-datetime/main',[\n    './date-view',\n    './time-view',\n    'moment',\n], function (\n    DateView,\n    TimeView,\n    moment\n) {\n    'use strict';\n\n    function addViewFooterBtn(picker) {\n        while (picker.btnGroup.previousElementSibling) {\n            picker.btnGroup.parentNode.removeChild(picker.btnGroup.previousElementSibling);\n        }\n\n        picker.btnGroup.parentNode.insertBefore(picker.views[picker.currentView].footerButton, picker.btnGroup);\n    }\n\n    function updateActiveViewBtn(picker) {\n        var activeBtn = picker.btnGroup.querySelector('.active');\n\n        if (activeBtn && activeBtn.className.indexOf('active')) {\n            activeBtn.className = activeBtn.className.replace('active', '');\n        }\n\n        if (picker.btnGroup.children.length > picker.currentView) {\n            var currentBtn = picker.btnGroup.children[picker.currentView];\n\n            if (currentBtn.className.indexOf('active') < 0) {\n                currentBtn.className += ' active';\n            }\n        }\n    }\n\n    function renderView(picker, view) {\n        var i;\n        var titleContents = view.titleContents;\n        var titleDiv = picker.popover.children[1];\n        var bodyContents = view.bodyContents;\n        var bodyDiv = picker.popover.children[2];\n\n        // Remove current children from popover title\n        while (titleDiv.firstChild) {\n            titleDiv.removeChild(titleDiv.firstChild);\n        }\n\n        // Remove current children from popover body\n        while (bodyDiv.firstChild) {\n            bodyDiv.removeChild(bodyDiv.firstChild);\n        }\n\n        if (titleContents) {\n            // Add title contents from view\n            for (i = 0; i < titleContents.length; i++) {\n                titleDiv.appendChild(titleContents[i]);\n            }\n\n            titleDiv.style.display = 'block';\n        } else {\n            titleDiv.style.display = 'none';\n        }\n\n        if (bodyContents) {\n            // Add title contents from view\n            for (i = 0; i < bodyContents.length; i++) {\n                bodyDiv.appendChild(bodyContents[i]);\n            }\n\n            bodyDiv.style.display = 'block';\n        } else {\n            bodyDiv.style.display = 'none';\n        }\n\n        bodyDiv.setAttribute('data-id', view.bodyDataId);\n\n        updateActiveViewBtn(picker);\n        addViewFooterBtn(picker);\n    }\n\n    function viewClickHandler(picker, e) {\n        var index = parseInt(e.currentTarget.getAttribute('data-index'));\n\n        // If clicked view is current view nothing to do\n        if (index === picker.currentView) {\n            return;\n        }\n\n        picker.currentView = index;\n\n        renderView(picker, picker.views[index]);\n    }\n\n    function setupFooterButtons(picker) {\n        while (picker.btnGroup.firstChild) {\n            picker.btnGroup.removeChild(picker.btnGroup.firstChild);\n        }\n\n        // If there is only one view then we don't need view buttons\n        if (picker.views.length === 1) {\n            return;\n        }\n\n        for (var i = 0; i < picker.views.length; i++) {\n            var button = document.createElement('a');\n            button.className = 'btn btn-default';\n            button.href = '#';\n            button.setAttribute('data-index', i);\n            var span = document.createElement('span');\n            span.className = 'glyphicon glyphicon-' + picker.views[i].icon;\n            button.appendChild(span);\n\n            button.onclick = function (e) {\n                e.preventDefault();\n                viewClickHandler(picker, e);\n            };\n\n            picker.btnGroup.appendChild(button);\n        }\n    }\n\n    function configurePicker(picker, inputGroup) {\n        picker.currentInput = inputGroup.children[0];\n\n        switch (picker.currentInput.getAttribute('data-type')) {\n            case 'date':\n                picker.views = [\n                    picker.dateView,\n                ];\n                break;\n\n            case 'time':\n                picker.views = [\n                    picker.timeView,\n                ];\n                break;\n\n            default:\n                picker.views = [\n                    picker.dateView,\n                    picker.timeView,\n                ];\n        }\n\n        setupFooterButtons(picker);\n        renderView(picker, picker.views[0]);\n    }\n\n    function createDiv(className) {\n        var div = document.createElement('div');\n        div.className = className;\n\n        return div;\n    }\n\n    function createPopover(picker) {\n        var popover = createDiv('popover bottom datetime-popover');\n        var arrow = createDiv('arrow');\n        var title = createDiv('popover-title text-center');\n        var body = createDiv('popover-content');\n        var footer = createDiv('panel-footer');\n        picker.btnGroup = createDiv('btn-group btn-group-xs pull-right');\n        var clearfix = createDiv('clearfix');\n\n        footer.appendChild(picker.btnGroup);\n        footer.appendChild(clearfix);\n        popover.appendChild(arrow);\n        popover.appendChild(title);\n        popover.appendChild(body);\n        popover.appendChild(footer);\n\n        return popover;\n    }\n\n    function getInputs(bindTo) {\n        // If bindTo is a string treat it as a query selector\n        if (typeof bindTo === 'string') {\n            return document.querySelectorAll(bindTo);\n        }\n\n        // If bindTo is a DOM element\n        if (bindTo.hasOwnProperty('nodeType')) {\n            return [bindTo];\n        }\n\n        // If bindTo is an array\n        if (bindTo instanceof Array) {\n            var inputs = [];\n\n            for (var i = 0; i < bindTo.length; i++) {\n                inputs = inputs.concat(getInputs(bindTo[i]));\n            }\n\n            return inputs;\n        }\n\n        // If bindTo is null then nothing to do\n        if (bindTo === null) {\n            return null;\n        }\n\n        throw 'Unknown type to bind bootstrap-datetime picker to';\n    }\n\n    function overrideDefaults(overrides) {\n        var options = {\n            dateFormat: 'YYYY-MM-DD',\n            dateTimeFormat: 'YYYY-MM-DD HH:mm:ss',\n            timeFormat: 'HH:mm:ss',\n        };\n\n        if (!overrides) {\n            return options;\n        }\n\n        for (var key in overrides) {\n            if (overrides.hasOwnProperty(key) && options.hasOwnProperty(key)) {\n                options[key] = overrides[key];\n            }\n        }\n\n        return options;\n    }\n\n    function pickerClickHandler(picker, e) {\n        var inputGroup = e.currentTarget.parentNode;\n\n        // If popover is already visible for this picker then hide it\n        if (picker.popover.parentNode === inputGroup.parentNode && picker.popover.style.display === 'block') {\n            picker.popover.style.display = 'none';\n            return;\n        }\n\n        picker.currentView = 0;\n\n        // If picker is not already configured for this input\n        if (picker.popover.parentNode !== inputGroup.parentNode) {\n            // Add picker to DOM for this input\n            inputGroup.parentNode.insertBefore(picker.popover, inputGroup.nextSibling);\n        }\n\n        configurePicker(picker, inputGroup);\n\n        // Make picker visible\n        picker.popover.style.display = 'block';\n\n        picker.currentDateTime = moment(inputGroup.children[0].value);\n\n        if (!picker.currentDateTime || !picker.currentDateTime.isValid()) {\n            picker.currentDateTime = moment();\n        }\n\n        picker.views[picker.currentView].update(picker.currentDateTime);\n    }\n\n    function updateCallback(picker, dateTime) {\n        picker.currentDateTime = dateTime;\n\n        // If current view is only view or last view then close popover\n        if ((picker.views.length === 1 || picker.currentView === (picker.views.length - 1)) &&\n            picker.views[picker.currentView].closeOnUpdate) {\n            picker.popover.style.display = 'none';\n        } else if (picker.currentView < (picker.views.length - 1)) {\n            picker.currentView += 1;\n            renderView(picker, picker.views[picker.currentView]);\n            picker.views[picker.currentView].update(picker.currentDateTime);\n        }\n\n        var format;\n\n        // Get text format for datetime based on input type\n        switch (picker.currentInput.getAttribute('data-type')) {\n            case 'date':\n                format = picker.options.dateFormat;\n                break;\n\n            case 'time':\n                format = picker.options.timeFormat;\n                break;\n\n            default:\n                format = picker.options.dateTimeFormat;\n        }\n\n        // Check for custom format specific to input\n        var customFormat = picker.currentInput.getAttribute('data-format');\n\n        // If input specifies custom format use it instead\n        if (customFormat) {\n            format = customFormat;\n        }\n\n        picker.currentInput.value = picker.currentDateTime.format(format);\n    }\n\n    function Picker(options) {\n        this.options = overrideDefaults(options);\n        this.popover = createPopover(this);\n        this.views = [];\n\n        var self = this;\n\n        this.dateView = new DateView(function (dateTime) {\n            updateCallback(self, dateTime);\n        });\n\n        this.timeView = new TimeView(function (dateTime) {\n            updateCallback(self, dateTime);\n        });\n    }\n\n    Picker.prototype.auto = function () {\n        this.bind('input[type=\"date\"], input[type=\"datetime\"], input[type=\"time\"]');\n    };\n\n    Picker.prototype.bind = function (bindTo) {\n        var inputs = getInputs(bindTo);\n        var self = this;\n\n        for (var i = 0; i < inputs.length; i++) {\n            var icon,\n                inputGroup;\n\n            var input = inputs[i];\n\n            // If input is not in an input group, put it inside an input group\n            if (input.parentNode.className.indexOf('input-group') < 0) {\n                inputGroup = createDiv('input-group');\n                input.parentNode.appendChild(inputGroup);\n                inputGroup.appendChild(input);\n            } else {\n                inputGroup = input.parentNode;\n            }\n\n            switch (input.type) {\n                case 'date':\n                    input.setAttribute('data-type', 'date');\n                    icon = 'calendar';\n                    break;\n\n                case 'time':\n                    input.setAttribute('data-type', 'time');\n                    icon = 'time';\n                    break;\n\n                default:\n                    input.setAttribute('data-type', 'datetime');\n                    icon = 'calendar';\n            }\n\n            // Change input type to text so browser doesn't try to implement its own picker\n            input.type = 'text';\n\n            //\n            var inputGroupBtn = createDiv('input-group-btn');\n            inputGroup.appendChild(inputGroupBtn);\n\n            var pickerBtn = document.createElement('button');\n            pickerBtn.className = 'btn btn-default';\n            inputGroupBtn.appendChild(pickerBtn);\n\n            inputGroupBtn.onclick = function (e) {\n                e.preventDefault();\n                pickerClickHandler(self, e);\n            };\n\n            var glyph = document.createElement('span');\n            glyph.className = 'glyphicon glyphicon-' + icon;\n            pickerBtn.appendChild(glyph);\n        }\n    };\n\n    return Picker;\n});\n\n"]}